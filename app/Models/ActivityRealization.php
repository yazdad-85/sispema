<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class ActivityRealization extends Model
{
    use HasFactory;

    protected $fillable = [
        'plan_id',
        'date',
        'description',
        'transaction_type',
        'unit_price',
        'equivalent_1',
        'equivalent_2',
        'equivalent_3',
        'total_amount',
        'proof',
        'status',
        'is_auto_generated'
    ];

    protected $casts = [
        'date' => 'date',
        'unit_price' => 'decimal:2',
        'equivalent_1' => 'decimal:2',
        'equivalent_2' => 'decimal:2',
        'equivalent_3' => 'decimal:2',
        'total_amount' => 'decimal:2',
        'is_auto_generated' => 'boolean'
    ];

    // Relationships
    public function plan()
    {
        return $this->belongsTo(ActivityPlan::class, 'plan_id');
    }

    // Scopes
    public function scopeConfirmed($query)
    {
        return $query->where('status', 'confirmed');
    }

    public function scopeAutoGenerated($query)
    {
        return $query->where('is_auto_generated', true);
    }

    public function scopeManual($query)
    {
        return $query->where('is_auto_generated', false);
    }

    // Boot method to auto-calculate total_amount
    protected static function boot()
    {
        parent::boot();

        static::saving(function ($realization) {
            // Calculate total amount based on unit_price and equivalents
            $total = $realization->unit_price;
            if ($realization->equivalent_1 > 0) {
                $total *= $realization->equivalent_1;
            }
            if ($realization->equivalent_2 > 0) {
                $total *= $realization->equivalent_2;
            }
            if ($realization->equivalent_3 > 0) {
                $total *= $realization->equivalent_3;
            }
            $realization->total_amount = $total;
        });
    }
}
